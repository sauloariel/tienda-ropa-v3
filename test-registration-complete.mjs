import fetch from 'node-fetch';

console.log('üîß Test Completo de Registro de Cliente');
console.log('=====================================\n');

async function testCompleteRegistration() {
    try {
        // Test 1: Verificar que el servidor est√© funcionando
        console.log('1Ô∏è‚É£ Verificando servidor...');
        const healthResponse = await fetch('http://localhost:4000/api/health');
        if (healthResponse.ok) {
            console.log('‚úÖ Servidor funcionando correctamente');
        } else {
            console.log('‚ùå Servidor no responde');
            return;
        }

        // Test 2: Probar registro con datos v√°lidos
        console.log('\n2Ô∏è‚É£ Probando registro con datos v√°lidos...');
        const testData = {
            mail: `testuser${Date.now()}@example.com`,
            password: "password123",
            nombre: "Test",
            apellido: "Usuario",
            telefono: "1234567890",
            domicilio: "Calle Test 123"
        };

        const registerResponse = await fetch('http://localhost:4000/api/clientes/auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });

        console.log(`üìä Status: ${registerResponse.status}`);
        const registerResult = await registerResponse.json();
        console.log('üìä Response:', JSON.stringify(registerResult, null, 2));

        if (registerResponse.ok) {
            console.log('‚úÖ Registro exitoso');
        } else {
            console.log('‚ùå Error en registro');
            return;
        }

        // Test 3: Probar login con las credenciales creadas
        console.log('\n3Ô∏è‚É£ Probando login con credenciales creadas...');
        const loginResponse = await fetch('http://localhost:4000/api/clientes/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                mail: testData.mail,
                password: testData.password
            })
        });

        console.log(`üìä Status: ${loginResponse.status}`);
        const loginResult = await loginResponse.json();
        console.log('üìä Response:', JSON.stringify(loginResult, null, 2));

        if (loginResponse.ok) {
            console.log('‚úÖ Login exitoso');
        } else {
            console.log('‚ùå Error en login');
        }

        // Test 4: Probar registro con email duplicado
        console.log('\n4Ô∏è‚É£ Probando registro con email duplicado...');
        const duplicateResponse = await fetch('http://localhost:4000/api/clientes/auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });

        console.log(`üìä Status: ${duplicateResponse.status}`);
        const duplicateResult = await duplicateResponse.json();
        console.log('üìä Response:', JSON.stringify(duplicateResult, null, 2));

        if (duplicateResponse.status === 400) {
            console.log('‚úÖ Validaci√≥n de email duplicado funcionando');
        } else {
            console.log('‚ùå Error en validaci√≥n de email duplicado');
        }

        console.log('\nüéâ Todos los tests completados');

    } catch (error) {
        console.error('‚ùå Error durante el test:', error.message);
    }
}

testCompleteRegistration();

