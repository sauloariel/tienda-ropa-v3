import fetch from 'node-fetch';

// Configuraci√≥n
const BASE_URL = 'http://localhost:3000/api/marketing';

console.log('üéØ Test Simple - Crear Promoci√≥n desde Frontend');
console.log('===============================================\n');

// Funci√≥n para crear una promoci√≥n
async function crearPromocion() {
    const promocionData = {
        nombre: 'Promoci√≥n Test Frontend',
        descripcion: 'Promoci√≥n creada desde el frontend para pruebas',
        tipo: 'PORCENTAJE',
        valor: 20.00,
        codigo_descuento: 'FRONTEND20',
        fecha_inicio: new Date().toISOString(),
        fecha_fin: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(), // 15 d√≠as
        minimo_compra: 30.00,
        uso_maximo: 25,
        estado: 'ACTIVA'
    };

    console.log('üìù Creando promoci√≥n con los siguientes datos:');
    console.log(JSON.stringify(promocionData, null, 2));
    console.log('\nüöÄ Enviando petici√≥n...');

    try {
        const response = await fetch(`${BASE_URL}/promociones`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(promocionData)
        });

        const result = await response.json();

        if (response.ok) {
            console.log('‚úÖ ¬°Promoci√≥n creada exitosamente!');
            console.log('üÜî ID:', result.id_promocion);
            console.log('üìã Nombre:', result.nombre);
            console.log('üè∑Ô∏è  C√≥digo:', result.codigo_descuento);
            console.log('üí∞ Descuento:', `${result.valor}%`);
            console.log('üìÖ V√°lida hasta:', new Date(result.fecha_fin).toLocaleDateString());

            return result;
        } else {
            console.log('‚ùå Error creando promoci√≥n:');
            console.log('Status:', response.status);
            console.log('Error:', result);
            return null;
        }
    } catch (error) {
        console.log('‚ùå Error de conexi√≥n:', error.message);
        console.log('üí° Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://localhost:3000');
        return null;
    }
}

// Funci√≥n para verificar la promoci√≥n creada
async function verificarPromocion(promocionId) {
    if (!promocionId) return;

    console.log('\nüîç Verificando promoci√≥n creada...');

    try {
        const response = await fetch(`${BASE_URL}/promociones/${promocionId}`);
        const result = await response.json();

        if (response.ok) {
            console.log('‚úÖ Promoci√≥n verificada correctamente');
            console.log('üìä Estado actual:');
            console.log(`   - Uso actual: ${result.uso_actual}/${result.uso_maximo}`);
            console.log(`   - Estado: ${result.estado}`);
            console.log(`   - Creada: ${new Date(result.createdAt).toLocaleString()}`);
        } else {
            console.log('‚ùå Error verificando promoci√≥n:', result);
        }
    } catch (error) {
        console.log('‚ùå Error verificando promoci√≥n:', error.message);
    }
}

// Funci√≥n para probar validaci√≥n del c√≥digo
async function probarValidacionCodigo() {
    console.log('\nüîç Probando validaci√≥n del c√≥digo de descuento...');

    const testData = {
        codigo: 'FRONTEND20',
        monto_compra: 50.00
    };

    try {
        const response = await fetch(`${BASE_URL}/validate-codigo`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(testData)
        });

        const result = await response.json();

        if (response.ok) {
            if (result.valid) {
                console.log('‚úÖ C√≥digo v√°lido');
                console.log(`üí∞ Descuento aplicable: $${result.promocion.descuento}`);
                console.log(`üè∑Ô∏è  Promoci√≥n: ${result.promocion.nombre}`);
            } else {
                console.log('‚ùå C√≥digo inv√°lido:', result.error);
            }
        } else {
            console.log('‚ùå Error validando c√≥digo:', result);
        }
    } catch (error) {
        console.log('‚ùå Error validando c√≥digo:', error.message);
    }
}

// Funci√≥n principal
async function main() {
    console.log('üöÄ Iniciando test de creaci√≥n de promoci√≥n...\n');

    // Crear promoci√≥n
    const promocion = await crearPromocion();

    if (promocion) {
        // Verificar promoci√≥n
        await verificarPromocion(promocion.id_promocion);

        // Probar validaci√≥n
        await probarValidacionCodigo();

        console.log('\nüéâ ¬°Test completado exitosamente!');
        console.log('‚úÖ La promoci√≥n se cre√≥ correctamente desde el frontend');
    } else {
        console.log('\n‚ùå Test fall√≥ - No se pudo crear la promoci√≥n');
    }
}

// Ejecutar test
main();

