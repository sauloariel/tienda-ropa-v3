import fetch from 'node-fetch';

// Configuraci√≥n del servidor
const BASE_URL = 'http://localhost:3000/api/marketing';
const HEADERS = {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
};

console.log('üß™ Test de Carga de Promoci√≥n desde Frontend');
console.log('==============================================\n');

// Funci√≥n para hacer peticiones HTTP
async function makeRequest(url, options = {}) {
    try {
        const response = await fetch(url, {
            headers: HEADERS,
            ...options
        });

        const data = await response.json();

        return {
            success: response.ok,
            status: response.status,
            data: data
        };
    } catch (error) {
        return {
            success: false,
            status: 0,
            error: error.message
        };
    }
}

// Test 1: Verificar que el servidor est√© funcionando
async function testServerConnection() {
    console.log('üîç [Test 1] Verificando conexi√≥n al servidor...');

    const result = await makeRequest(`${BASE_URL}/`);

    if (result.success) {
        console.log('‚úÖ Servidor conectado correctamente');
        console.log('üìã Endpoints disponibles:', result.data.endpoints);
    } else {
        console.log('‚ùå Error conectando al servidor:', result.error || result.data);
        return false;
    }

    return true;
}

// Test 2: Obtener promociones existentes
async function testGetPromociones() {
    console.log('\nüîç [Test 2] Obteniendo promociones existentes...');

    const result = await makeRequest(`${BASE_URL}/promociones`);

    if (result.success) {
        console.log(`‚úÖ Se encontraron ${result.data.length} promociones existentes`);

        // Mostrar algunas promociones
        if (result.data.length > 0) {
            console.log('üìã Primeras 3 promociones:');
            result.data.slice(0, 3).forEach((promo, index) => {
                console.log(`   ${index + 1}. ${promo.nombre} (${promo.tipo}: ${promo.valor}) - ${promo.estado}`);
            });
        }

        return result.data.length;
    } else {
        console.log('‚ùå Error obteniendo promociones:', result.data);
        return 0;
    }
}

// Test 3: Crear nueva promoci√≥n
async function testCreatePromocion() {
    console.log('\nüîç [Test 3] Creando nueva promoci√≥n...');

    const nuevaPromocion = {
        nombre: 'Test Frontend - Descuento 15%',
        descripcion: 'Promoci√≥n de prueba creada desde el frontend',
        tipo: 'PORCENTAJE',
        valor: 15.00,
        codigo_descuento: 'TEST15',
        fecha_inicio: new Date().toISOString(),
        fecha_fin: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 d√≠as
        minimo_compra: 25.00,
        uso_maximo: 50,
        estado: 'ACTIVA'
    };

    console.log('üìù Datos de la nueva promoci√≥n:');
    console.log(JSON.stringify(nuevaPromocion, null, 2));

    const result = await makeRequest(`${BASE_URL}/promociones`, {
        method: 'POST',
        body: JSON.stringify(nuevaPromocion)
    });

    if (result.success) {
        console.log('‚úÖ Promoci√≥n creada exitosamente');
        console.log('üÜî ID de la nueva promoci√≥n:', result.data.id_promocion);
        return result.data;
    } else {
        console.log('‚ùå Error creando promoci√≥n:', result.data);
        return null;
    }
}

// Test 4: Verificar promoci√≥n creada
async function testVerifyPromocion(promocionId) {
    if (!promocionId) {
        console.log('\n‚è≠Ô∏è  [Test 4] Saltando verificaci√≥n (no hay promoci√≥n creada)');
        return;
    }

    console.log('\nüîç [Test 4] Verificando promoci√≥n creada...');

    const result = await makeRequest(`${BASE_URL}/promociones/${promocionId}`);

    if (result.success) {
        console.log('‚úÖ Promoci√≥n verificada correctamente');
        console.log('üìã Detalles de la promoci√≥n:');
        console.log(`   - ID: ${result.data.id_promocion}`);
        console.log(`   - Nombre: ${result.data.nombre}`);
        console.log(`   - Tipo: ${result.data.tipo}`);
        console.log(`   - Valor: ${result.data.valor}`);
        console.log(`   - C√≥digo: ${result.data.codigo_descuento}`);
        console.log(`   - Estado: ${result.data.estado}`);
        console.log(`   - Uso actual: ${result.data.uso_actual}/${result.data.uso_maximo}`);
    } else {
        console.log('‚ùå Error verificando promoci√≥n:', result.data);
    }
}

// Test 5: Validar c√≥digo de descuento
async function testValidateCodigo() {
    console.log('\nüîç [Test 5] Probando validaci√≥n de c√≥digo de descuento...');

    const testData = {
        codigo: 'TEST15',
        monto_compra: 50.00
    };

    const result = await makeRequest(`${BASE_URL}/validate-codigo`, {
        method: 'POST',
        body: JSON.stringify(testData)
    });

    if (result.success) {
        if (result.data.valid) {
            console.log('‚úÖ C√≥digo de descuento v√°lido');
            console.log(`üí∞ Descuento calculado: $${result.data.promocion.descuento}`);
        } else {
            console.log('‚ùå C√≥digo de descuento inv√°lido:', result.data.error);
        }
    } else {
        console.log('‚ùå Error validando c√≥digo:', result.data);
    }
}

// Test 6: Obtener estad√≠sticas actualizadas
async function testGetStats() {
    console.log('\nüîç [Test 6] Obteniendo estad√≠sticas actualizadas...');

    const result = await makeRequest(`${BASE_URL}/stats`);

    if (result.success) {
        console.log('‚úÖ Estad√≠sticas obtenidas correctamente');
        console.log('üìä Estad√≠sticas de marketing:');
        console.log(`   - Total promociones: ${result.data.total_promociones}`);
        console.log(`   - Promociones activas: ${result.data.promociones_activas}`);
        console.log(`   - Promociones inactivas: ${result.data.promociones_inactivas}`);
        console.log(`   - Promociones expiradas: ${result.data.promociones_expiradas}`);
        console.log(`   - Promociones por vencer: ${result.data.promociones_por_vencer}`);
        console.log(`   - Total uso: ${result.data.total_uso}`);
    } else {
        console.log('‚ùå Error obteniendo estad√≠sticas:', result.data);
    }
}

// Test 7: Actualizar promoci√≥n
async function testUpdatePromocion(promocionId) {
    if (!promocionId) {
        console.log('\n‚è≠Ô∏è  [Test 7] Saltando actualizaci√≥n (no hay promoci√≥n creada)');
        return;
    }

    console.log('\nüîç [Test 7] Actualizando promoci√≥n...');

    const updateData = {
        descripcion: 'Promoci√≥n actualizada desde el frontend - Test completado',
        uso_maximo: 100
    };

    const result = await makeRequest(`${BASE_URL}/promociones/${promocionId}`, {
        method: 'PUT',
        body: JSON.stringify(updateData)
    });

    if (result.success) {
        console.log('‚úÖ Promoci√≥n actualizada correctamente');
        console.log('üìù Nueva descripci√≥n:', result.data.descripcion);
        console.log('üî¢ Nuevo l√≠mite de uso:', result.data.uso_maximo);
    } else {
        console.log('‚ùå Error actualizando promoci√≥n:', result.data);
    }
}

// Test 8: Cambiar estado de promoci√≥n
async function testToggleEstado(promocionId) {
    if (!promocionId) {
        console.log('\n‚è≠Ô∏è  [Test 8] Saltando cambio de estado (no hay promoci√≥n creada)');
        return;
    }

    console.log('\nüîç [Test 8] Cambiando estado de promoci√≥n...');

    const result = await makeRequest(`${BASE_URL}/promociones/${promocionId}/estado`, {
        method: 'PATCH',
        body: JSON.stringify({ estado: 'INACTIVA' })
    });

    if (result.success) {
        console.log('‚úÖ Estado cambiado correctamente');
        console.log('üîÑ Nuevo estado:', result.data.estado);
    } else {
        console.log('‚ùå Error cambiando estado:', result.data);
    }
}

// Test 9: Eliminar promoci√≥n de prueba
async function testDeletePromocion(promocionId) {
    if (!promocionId) {
        console.log('\n‚è≠Ô∏è  [Test 9] Saltando eliminaci√≥n (no hay promoci√≥n creada)');
        return;
    }

    console.log('\nüîç [Test 9] Eliminando promoci√≥n de prueba...');

    const result = await makeRequest(`${BASE_URL}/promociones/${promocionId}`, {
        method: 'DELETE'
    });

    if (result.success) {
        console.log('‚úÖ Promoci√≥n eliminada correctamente');
        console.log('üóëÔ∏è  Mensaje:', result.data.message);
    } else {
        console.log('‚ùå Error eliminando promoci√≥n:', result.data);
    }
}

// Funci√≥n principal que ejecuta todos los tests
async function runAllTests() {
    console.log('üöÄ Iniciando tests de carga de promoci√≥n desde frontend...\n');

    try {
        // Test 1: Verificar conexi√≥n
        const serverOk = await testServerConnection();
        if (!serverOk) {
            console.log('\n‚ùå No se puede continuar sin conexi√≥n al servidor');
            return;
        }

        // Test 2: Obtener promociones existentes
        const promocionesExistentes = await testGetPromociones();

        // Test 3: Crear nueva promoci√≥n
        const nuevaPromocion = await testCreatePromocion();
        const promocionId = nuevaPromocion?.id_promocion;

        // Test 4: Verificar promoci√≥n creada
        await testVerifyPromocion(promocionId);

        // Test 5: Validar c√≥digo de descuento
        await testValidateCodigo();

        // Test 6: Obtener estad√≠sticas
        await testGetStats();

        // Test 7: Actualizar promoci√≥n
        await testUpdatePromocion(promocionId);

        // Test 8: Cambiar estado
        await testToggleEstado(promocionId);

        // Test 9: Eliminar promoci√≥n de prueba
        await testDeletePromocion(promocionId);

        console.log('\nüéâ ¬°Todos los tests completados!');
        console.log('‚úÖ El m√≥dulo de marketing est√° funcionando correctamente desde el frontend');

    } catch (error) {
        console.error('\n‚ùå Error durante la ejecuci√≥n de tests:', error.message);
    }
}

// Ejecutar tests
runAllTests();

